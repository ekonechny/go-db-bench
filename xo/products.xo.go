package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/lib/pq"

	"github.com/google/uuid"
)

// Products represents a row from 'public.products'.
type Products struct {
	ID          uuid.UUID      `json:"id"`          // id
	Name        string         `json:"name"`        // name
	Description string         `json:"description"` // description
	Categories  pq.StringArray `json:"categories"`  // categories
	Price       float64        `json:"price"`       // price
	Features    pq.StringArray `json:"features"`    // features
	Color       string         `json:"color"`       // color
	Material    string         `json:"material"`    // material
	Upc         string         `json:"upc"`         // upc
}

// ProductsByLimit runs a custom query, returning results as [Products].
func ProductsByLimit(ctx context.Context, db DB, limit int) ([]*Products, error) {
	// query
	const sqlstr = `SELECT *      FROM products      LIMIT $1`
	// run
	logf(sqlstr, limit)
	rows, err := db.QueryContext(ctx, sqlstr, limit)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Products
	for rows.Next() {
		var p Products
		// scan
		if err := rows.Scan(&p.ID, &p.Name, &p.Description, &p.Categories, &p.Price, &p.Features, &p.Color, &p.Material, &p.Upc); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
