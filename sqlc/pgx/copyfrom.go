// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package pgx

import (
	"context"
)

// iteratorForInsert implements pgx.CopyFromSource.
type iteratorForInsert struct {
	rows                 []InsertParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsert) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsert) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].Categories,
		r.rows[0].Price,
		r.rows[0].Features,
		r.rows[0].Color,
		r.rows[0].Material,
		r.rows[0].Upc,
	}, nil
}

func (r iteratorForInsert) Err() error {
	return nil
}

func (q *Queries) Insert(ctx context.Context, arg []InsertParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"products"}, []string{"name", "description", "categories", "price", "features", "color", "material", "upc"}, &iteratorForInsert{rows: arg})
}
